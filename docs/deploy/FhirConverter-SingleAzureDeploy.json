{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.26.54.24096",
      "templateHash": "12546413749549776811"
    }
  },
  "parameters": {
    "serviceName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 9,
      "metadata": {
        "description": "Used as the prefix to name provisioned resources where a custom name is not provided. Should be alphanumeric, at least 3 characters and no more than 9 characters."
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "australiaeast",
        "brazilsouth",
        "canadacentral",
        "canadaeast",
        "centralindia",
        "centralus",
        "chinanorth3",
        "eastasia",
        "eastus",
        "eastus2",
        "francecentral",
        "germanywestcentral",
        "japaneast",
        "koreacentral",
        "northcentralus",
        "northeurope",
        "norwayeast",
        "southafricanorth",
        "southcentralus",
        "southeastasia",
        "swedencentral",
        "switzerlandnorth",
        "uaenorth",
        "uksouth",
        "westeurope",
        "westus",
        "westus2",
        "westus3"
      ],
      "metadata": {
        "description": "Location where the resources are deployed."
      }
    },
    "containerAppImageTag": {
      "type": "string",
      "metadata": {
        "description": "The tag of the image to pull from MCR. To see available image tags, visit the [FHIR Converter MCR page](https://mcr.microsoft.com/en-us/product/healthcareapis/fhir-converter/tags)"
      }
    },
    "timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddHHmmss')]",
      "metadata": {
        "description": "Timestamp used to generate unique deployment names. Defaults to utcNow"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[format('{0}-rg', parameters('serviceName'))]",
      "metadata": {
        "description": "Name of the resource group to deploy the resources to. If the resource group does not already exist, a new resource group will be provisioned with the given name or, if a name is not provided, with an autogenerated name based on serviceName."
      }
    },
    "containerAppEnvName": {
      "type": "string",
      "defaultValue": "[format('{0}-app-env', parameters('serviceName'))]",
      "metadata": {
        "description": "Name of the container app environment. If a name is not provided, an autogenerated name based on serviceName will be used."
      }
    },
    "containerAppName": {
      "type": "string",
      "defaultValue": "[format('{0}-app', parameters('serviceName'))]",
      "metadata": {
        "description": "Name of the container app to run the FHIR Converter service. If a name is not provided, an autogenerated name based on serviceName will be used."
      }
    },
    "minReplicas": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Minimum number of replicas for the container app."
      }
    },
    "maxReplicas": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Maximum number of replicas for the container app."
      }
    },
    "cpuLimit": {
      "type": "string",
      "defaultValue": "1.0",
      "metadata": {
        "description": "CPU limit for the container app."
      }
    },
    "memoryLimit": {
      "type": "string",
      "defaultValue": "2Gi",
      "metadata": {
        "description": "Memory limit for the container app."
      }
    },
    "templateStoreIntegrationEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Set to true to enable deployment of and integration with a storage account for custom templates."
      }
    },
    "templateStorageAccountName": {
      "type": "string",
      "defaultValue": "[format('{0}templatestorage', parameters('serviceName'))]",
      "metadata": {
        "description": "Name of storage account containing custom templates. If a name is not provided and enableTemplateStoreIntegration is true, an autogenerated name based on serviceName will be used."
      }
    },
    "templateStorageAccountContainerName": {
      "type": "string",
      "defaultValue": "[format('{0}templatecontainer', parameters('serviceName'))]",
      "metadata": {
        "description": "Name of storage account container containing custom templates. If a name is not provided and enableTemplateStoreIntegration is true, an autogenerated name based on serviceName will be used."
      }
    },
    "applicationInsightsEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If set to true, Application Insights logs and metrics collection will be enabled for the container app."
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[format('{0}-kv', parameters('serviceName'))]",
      "metadata": {
        "description": "Name of the key vault to hold the application insights connection string as a secret. If a name is not provided, an autogenerated name based on serviceName will be used."
      }
    },
    "keyVaultUserAssignedIdentityName": {
      "type": "string",
      "defaultValue": "[format('{0}-kv-identity', parameters('serviceName'))]",
      "metadata": {
        "description": "Name of the user-assigned managed identity to be deployed for accessing the key vault. If a name is not provided, an autogenerated name based on serviceName will be used."
      }
    },
    "securityEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "If set to true, security requirements will be enabled on the API endpoint. This is strongly recommended."
      }
    },
    "securityAuthenticationAudiences": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Audiences for the api authentication."
      }
    },
    "securityAuthenticationAuthority": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Authority for the api authentication."
      }
    }
  },
  "variables": {
    "deploymentTemplateVersion": "1",
    "deployKeyVault": "[parameters('applicationInsightsEnabled')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-06-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": {
        "fhirConverterDeploymentTemplateVersion": "[variables('deploymentTemplateVersion')]"
      }
    },
    {
      "condition": "[or(parameters('templateStoreIntegrationEnabled'), variables('deployKeyVault'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dependentResourceDeploy_{0}', parameters('timestamp'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "deployTemplateStore": {
            "value": "[parameters('templateStoreIntegrationEnabled')]"
          },
          "templateStorageAccountName": {
            "value": "[parameters('templateStorageAccountName')]"
          },
          "templateStorageAccountContainerName": {
            "value": "[parameters('templateStorageAccountContainerName')]"
          },
          "deployKeyVault": {
            "value": "[variables('deployKeyVault')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUserAssignedIdentityName": {
            "value": "[parameters('keyVaultUserAssignedIdentityName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "5567454211566534226"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "allowedValues": [
                "australiacentral",
                "australiaeast",
                "australiasoutheast",
                "brazilsouth",
                "canadacentral",
                "canadaeast",
                "centralindia",
                "centralus",
                "chinaeast2",
                "chinanorth2",
                "chinanorth3",
                "eastasia",
                "eastus",
                "eastus2",
                "francecentral",
                "germanywestcentral",
                "italynorth",
                "japaneast",
                "japanwest",
                "koreacentral",
                "northcentralus",
                "northeurope",
                "norwayeast",
                "polandcentral",
                "qatarcentral",
                "southafricanorth",
                "southcentralus",
                "southeastasia",
                "southindia",
                "swedencentral",
                "switzerlandnorth",
                "uaenorth",
                "uksouth",
                "ukwest",
                "westcentralus",
                "westeurope",
                "westus",
                "westus2",
                "westus3"
              ],
              "metadata": {
                "description": "Location where the storage account is deployed. For list of Azure regions where Blob Storage is available, see [Products available by region](https://azure.microsoft.com/en-us/explore/global-infrastructure/products-by-region/?products=key-vault,storage)."
              }
            },
            "deployTemplateStore": {
              "type": "bool",
              "metadata": {
                "description": "If set to true, a storage account and blob container will be deployed with the specified names for storing custom templates."
              }
            },
            "templateStorageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the storage account to be deployed."
              }
            },
            "templateStorageAccountContainerName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the storage account container to be deployed."
              }
            },
            "deployKeyVault": {
              "type": "bool",
              "metadata": {
                "description": "If set to true, a key vault and user assigned managed identity will be deployed with the specified names."
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the key vault to be deployed."
              }
            },
            "keyVaultUserAssignedIdentityName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the user-assigned managed identity to be deployed for accessing the key vault."
              }
            }
          },
          "variables": {
            "kvSecretUserRole": "4633458b-17de-408a-b874-0445c86b69e6"
          },
          "resources": [
            {
              "condition": "[parameters('deployTemplateStore')]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[if(parameters('deployTemplateStore'), parameters('templateStorageAccountName'), 'default')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {}
            },
            {
              "condition": "[parameters('deployTemplateStore')]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', if(parameters('deployTemplateStore'), parameters('templateStorageAccountName'), 'default'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', if(parameters('deployTemplateStore'), parameters('templateStorageAccountName'), 'default'))]"
              ]
            },
            {
              "condition": "[parameters('deployTemplateStore')]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', if(parameters('deployTemplateStore'), parameters('templateStorageAccountName'), 'default'), 'default', if(parameters('deployTemplateStore'), parameters('templateStorageAccountContainerName'), 'default'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', if(parameters('deployTemplateStore'), parameters('templateStorageAccountName'), 'default'), 'default')]"
              ]
            },
            {
              "condition": "[parameters('deployKeyVault')]",
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-04-01-preview",
              "name": "[if(parameters('deployKeyVault'), parameters('keyVaultName'), 'default')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "enableRbacAuthorization": true
              }
            },
            {
              "condition": "[parameters('deployKeyVault')]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[if(parameters('deployKeyVault'), parameters('keyVaultUserAssignedIdentityName'), 'default')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[parameters('deployKeyVault')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', if(parameters('deployKeyVault'), parameters('keyVaultName'), 'default'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', if(parameters('deployKeyVault'), parameters('keyVaultUserAssignedIdentityName'), 'default')), variables('kvSecretUserRole'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('kvSecretUserRole'))]",
                "principalId": "[if(parameters('deployKeyVault'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', if(parameters('deployKeyVault'), parameters('keyVaultUserAssignedIdentityName'), 'default')), '2023-01-31').principalId, 'default')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', if(parameters('deployKeyVault'), parameters('keyVaultName'), 'default'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', if(parameters('deployKeyVault'), parameters('keyVaultUserAssignedIdentityName'), 'default'))]"
              ]
            }
          ],
          "outputs": {
            "templateStorageAccountName": {
              "type": "string",
              "value": "[if(parameters('deployTemplateStore'), if(parameters('deployTemplateStore'), parameters('templateStorageAccountName'), 'default'), '')]"
            },
            "templateStorageAccountContainerName": {
              "type": "string",
              "value": "[if(parameters('deployTemplateStore'), if(parameters('deployTemplateStore'), parameters('templateStorageAccountContainerName'), 'default'), '')]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[if(parameters('deployKeyVault'), if(parameters('deployKeyVault'), parameters('keyVaultName'), 'default'), '')]"
            },
            "keyVaultUAMIName": {
              "type": "string",
              "value": "[if(parameters('deployKeyVault'), if(parameters('deployKeyVault'), parameters('keyVaultUserAssignedIdentityName'), 'default'), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('convertInfrastructureDeploy_{0}', parameters('timestamp'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "envName": {
            "value": "[parameters('containerAppEnvName')]"
          },
          "deployApplicationInsights": {
            "value": "[parameters('applicationInsightsEnabled')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "12144000305921329618"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "allowedValues": [
                "australiaeast",
                "brazilsouth",
                "canadacentral",
                "canadaeast",
                "centralindia",
                "centralus",
                "chinanorth3",
                "eastasia",
                "eastus",
                "eastus2",
                "francecentral",
                "germanywestcentral",
                "japaneast",
                "koreacentral",
                "northcentralus",
                "northeurope",
                "norwayeast",
                "southafricanorth",
                "southcentralus",
                "southeastasia",
                "swedencentral",
                "switzerlandnorth",
                "uaenorth",
                "uksouth",
                "ukwest",
                "westeurope",
                "westus",
                "westus2",
                "westus3"
              ],
              "metadata": {
                "description": "Location where the resources are deployed. For list of Azure regions where the below resources are available, see [Products available by region](https://azure.microsoft.com/en-us/explore/global-infrastructure/products-by-region/?products=monitor,container-apps)."
              }
            },
            "envName": {
              "type": "string",
              "metadata": {
                "description": "Name of the container apps environment."
              }
            },
            "deployApplicationInsights": {
              "type": "bool",
              "metadata": {
                "description": "If set to true, Application Insights logs and metrics collection will be enabled for the container app."
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "The name of the Key Vault to store the Application Insights connection string secret."
              }
            }
          },
          "variables": {
            "logAnalyticsWorkspaceName": "[format('{0}-logsws', parameters('envName'))]",
            "applicationInsightsName": "[format('{0}-ai', parameters('envName'))]",
            "applicationInsightsConnectionStringSecretName": "[format('{0}-connection-string', variables('applicationInsightsName'))]",
            "applicationInsightsUAMIName": "[format('{0}-mi', variables('applicationInsightsName'))]",
            "monitoringMetricsPublisherRoleDefinition": "3913510d-42f4-4e42-8a64-420c390055eb",
            "containerAppEnvironmentName": "[parameters('envName')]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-03-01-preview",
              "name": "[variables('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "retentionInDays": 30,
                "features": {
                  "searchVersion": 1
                },
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "condition": "[parameters('deployApplicationInsights')]",
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[if(parameters('deployApplicationInsights'), variables('applicationInsightsName'), 'default')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "DisableLocalAuth": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
              ]
            },
            {
              "condition": "[parameters('deployApplicationInsights')]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('applicationInsightsConnectionStringSecretName'))]",
              "properties": {
                "value": "[if(parameters('deployApplicationInsights'), reference(resourceId('Microsoft.Insights/components', if(parameters('deployApplicationInsights'), variables('applicationInsightsName'), 'default')), '2020-02-02').ConnectionString, 'default')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', if(parameters('deployApplicationInsights'), variables('applicationInsightsName'), 'default'))]"
              ]
            },
            {
              "condition": "[parameters('deployApplicationInsights')]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[variables('applicationInsightsUAMIName')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[parameters('deployApplicationInsights')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.Insights/components', if(parameters('deployApplicationInsights'), variables('applicationInsightsName'), 'default')), variables('monitoringMetricsPublisherRoleDefinition'))]",
              "properties": {
                "principalId": "[if(parameters('deployApplicationInsights'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('applicationInsightsUAMIName')), '2023-01-31').principalId, 'default')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('monitoringMetricsPublisherRoleDefinition'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', if(parameters('deployApplicationInsights'), variables('applicationInsightsName'), 'default'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('applicationInsightsUAMIName'))]"
              ]
            },
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2023-05-01",
              "name": "[variables('containerAppEnvironmentName')]",
              "location": "[parameters('location')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName')), '2020-03-01-preview').customerId]",
                    "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName')), '2020-03-01-preview').primarySharedKey]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
              ]
            }
          ],
          "outputs": {
            "containerAppEnvironmentName": {
              "type": "string",
              "value": "[variables('containerAppEnvironmentName')]"
            },
            "containerAppEnvironmentId": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvironmentName'))]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[variables('logAnalyticsWorkspaceName')]"
            },
            "applicationInsightsUAMIName": {
              "type": "string",
              "value": "[if(parameters('deployApplicationInsights'), variables('applicationInsightsUAMIName'), '')]"
            },
            "applicationInsightsConnStringSecretName": {
              "type": "string",
              "value": "[if(parameters('deployApplicationInsights'), variables('applicationInsightsConnectionStringSecretName'), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('fhirConverterDeploy_{0}', parameters('timestamp'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "containerAppImageTag": {
            "value": "[parameters('containerAppImageTag')]"
          },
          "containerAppName": {
            "value": "[parameters('containerAppName')]"
          },
          "containerAppEnvName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('convertInfrastructureDeploy_{0}', parameters('timestamp'))), '2022-09-01').outputs.containerAppEnvironmentName.value]"
          },
          "minReplicas": {
            "value": "[parameters('minReplicas')]"
          },
          "maxReplicas": {
            "value": "[parameters('maxReplicas')]"
          },
          "cpuLimit": {
            "value": "[parameters('cpuLimit')]"
          },
          "memoryLimit": {
            "value": "[parameters('memoryLimit')]"
          },
          "securityEnabled": {
            "value": "[parameters('securityEnabled')]"
          },
          "securityAuthenticationAudiences": {
            "value": "[parameters('securityAuthenticationAudiences')]"
          },
          "securityAuthenticationAuthority": {
            "value": "[parameters('securityAuthenticationAuthority')]"
          },
          "templateStorageAccountName": "[if(parameters('templateStoreIntegrationEnabled'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('dependentResourceDeploy_{0}', parameters('timestamp'))), '2022-09-01').outputs.templateStorageAccountName.value), createObject('value', ''))]",
          "templateStorageAccountContainerName": "[if(parameters('templateStoreIntegrationEnabled'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('dependentResourceDeploy_{0}', parameters('timestamp'))), '2022-09-01').outputs.templateStorageAccountContainerName.value), createObject('value', ''))]",
          "keyVaultName": "[if(variables('deployKeyVault'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('dependentResourceDeploy_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyVaultName.value), createObject('value', ''))]",
          "keyVaultUserAssignedIdentityName": "[if(variables('deployKeyVault'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('dependentResourceDeploy_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyVaultUAMIName.value), createObject('value', ''))]",
          "applicationInsightsUserAssignedIdentityName": "[if(parameters('applicationInsightsEnabled'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('convertInfrastructureDeploy_{0}', parameters('timestamp'))), '2022-09-01').outputs.applicationInsightsUAMIName.value), createObject('value', ''))]",
          "applicationInsightsConnectionStringSecretName": "[if(parameters('applicationInsightsEnabled'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('convertInfrastructureDeploy_{0}', parameters('timestamp'))), '2022-09-01').outputs.applicationInsightsConnStringSecretName.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7072297402308187622"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "allowedValues": [
                "australiaeast",
                "brazilsouth",
                "canadacentral",
                "canadaeast",
                "centralindia",
                "centralus",
                "chinanorth3",
                "eastasia",
                "eastus",
                "eastus2",
                "francecentral",
                "germanywestcentral",
                "japaneast",
                "koreacentral",
                "northcentralus",
                "northeurope",
                "norwayeast",
                "southafricanorth",
                "southcentralus",
                "southeastasia",
                "swedencentral",
                "switzerlandnorth",
                "uaenorth",
                "uksouth",
                "ukwest",
                "westcentralus",
                "westeurope",
                "westus",
                "westus2",
                "westus3"
              ],
              "metadata": {
                "description": "Location where the resources are deployed. Note that a Container App can only be provisioned in the same region as its parent Container Apps Environment. For list of Azure regions where Container Apps is available, see [Products available by region](https://azure.microsoft.com/en-us/explore/global-infrastructure/products-by-region/?products=container-apps)"
              }
            },
            "containerAppName": {
              "type": "string",
              "metadata": {
                "description": "The name of the container app running the FHIR-Converter service."
              }
            },
            "containerAppEnvName": {
              "type": "string",
              "metadata": {
                "description": "The name of the container apps environment where the app will run."
              }
            },
            "containerAppImageTag": {
              "type": "string",
              "metadata": {
                "description": "Tag of the image to deploy. To see available image versions, visit the [FHIR Converter MCR page](https://mcr.microsoft.com/en-us/product/healthcareapis/fhir-converter/tags)"
              }
            },
            "timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('yyyyMMddHHmmss')]",
              "metadata": {
                "description": "Timestamp to append to container name. Defaults to time of deployment."
              }
            },
            "templateStorageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of storage account containing custom templates. Leave blank if using default templates."
              }
            },
            "templateStorageAccountContainerName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the container in the storage account containing custom templates. Leave blank if using default templates."
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the key vault containing the application insights connection string secret."
              }
            },
            "keyVaultUserAssignedIdentityName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the user-assigned managed identity to be used by the container app to access key vault secrets."
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Minimum possible number of replicas per revision as the container app scales."
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "Maximum possible number of replicas per revision as the container app scales."
              }
            },
            "cpuLimit": {
              "type": "string",
              "defaultValue": "1.0",
              "metadata": {
                "description": "CPU usage limit in cores."
              }
            },
            "memoryLimit": {
              "type": "string",
              "defaultValue": "2Gi",
              "metadata": {
                "description": "Memory usage limit in Gi."
              }
            },
            "securityEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "If set to true, security will be enabled on the API endpoint."
              }
            },
            "securityAuthenticationAudiences": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "List of audiences that the authentication token is intended for."
              }
            },
            "securityAuthenticationAuthority": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Issuing authority of the JWT token."
              }
            },
            "applicationInsightsUserAssignedIdentityName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The name of the user-assigned managed identity to be used by the container app to access application insights."
              }
            },
            "applicationInsightsConnectionStringSecretName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The name of the secret in the key vault containing the application insights connection string."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "securityAuthenticationAudiencesConfig",
                "count": "[length(parameters('securityAuthenticationAudiences'))]",
                "input": {
                  "name": "[format('{0}{1}', variables('securityAuthenticationAudiencesConfigNamePrefix'), copyIndex('securityAuthenticationAudiencesConfig'))]",
                  "value": "[parameters('securityAuthenticationAudiences')[copyIndex('securityAuthenticationAudiencesConfig')]]"
                }
              }
            ],
            "configureApplicationInsights": "[not(empty(parameters('applicationInsightsUserAssignedIdentityName')))]",
            "securityEnabledConfigName": "ConvertService__Security__Enabled",
            "securityAuthenticationAudiencesConfigNamePrefix": "ConvertService__Security__Authentication__Audiences__",
            "securityAuthenticationAuthorityConfigName": "ConvertService__Security__Authentication__Authority",
            "securityEnabledConfiguration": [
              {
                "name": "[variables('securityEnabledConfigName')]",
                "value": "[string(parameters('securityEnabled'))]"
              }
            ],
            "securityAuthenticationAuthorityConfig": [
              {
                "name": "[variables('securityAuthenticationAuthorityConfigName')]",
                "value": "[parameters('securityAuthenticationAuthority')]"
              }
            ],
            "securityConfiguration": "[concat(variables('securityEnabledConfiguration'), if(parameters('securityEnabled'), concat(variables('securityAuthenticationAuthorityConfig'), variables('securityAuthenticationAudiencesConfig')), createArray()))]",
            "integrateTemplateStore": "[and(not(empty(parameters('templateStorageAccountName'))), not(empty(parameters('templateStorageAccountContainerName'))))]",
            "storageEnvironmentSuffix": "[environment().suffixes.storage]",
            "blobTemplateHostingConfigurationName": "TemplateHosting__StorageAccountConfiguration__ContainerUrl",
            "blobTemplateHostingConfigurationValue": "[format('https://{0}.blob.{1}/{2}', parameters('templateStorageAccountName'), variables('storageEnvironmentSuffix'), parameters('templateStorageAccountContainerName'))]",
            "blobTemplateHostingConfiguration": "[if(variables('integrateTemplateStore'), createArray(createObject('name', variables('blobTemplateHostingConfigurationName'), 'value', variables('blobTemplateHostingConfigurationValue'))), createArray())]",
            "applicationInsightsConnectionStringConfigurationName": "ConvertService__Telemetry__AzureMonitor__ApplicationInsightsConnectionString",
            "applicationInsightsUAMIClientIdConfigurationName": "ConvertService__Telemetry__AzureMonitor__ManagedIdentityClientId",
            "imageName": "healthcareapis/fhir-converter",
            "applicationInsightsUAMIResourceId": "[if(variables('configureApplicationInsights'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('applicationInsightsUserAssignedIdentityName')), '')]",
            "keyVaultUAMIResourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('keyVaultUserAssignedIdentityName'))]",
            "userAssignedIdentities": "[if(variables('configureApplicationInsights'), createObject(format('{0}', variables('applicationInsightsUAMIResourceId')), createObject(), format('{0}', variables('keyVaultUAMIResourceId')), createObject()), createObject())]",
            "akvEnvironmentSuffix": "[environment().suffixes.keyvaultDns]",
            "applicationInsightsConnStringAKVSecretUrl": "[format('https://{0}{1}/secrets/{2}', parameters('keyVaultName'), variables('akvEnvironmentSuffix'), parameters('applicationInsightsConnectionStringSecretName'))]",
            "roleAssignmentName": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('templateStorageAccountName'), 'default', parameters('templateStorageAccountContainerName')), parameters('containerAppName'), variables('storageBlobDataReaderRoleDefinitionId'))]",
            "storageBlobDataReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]"
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[parameters('containerAppName')]",
              "location": "[parameters('location')]",
              "identity": "[if(variables('configureApplicationInsights'), createObject('type', 'SystemAssigned, UserAssigned', 'userAssignedIdentities', variables('userAssignedIdentities')), createObject('type', 'SystemAssigned'))]",
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvName'))]",
                "configuration": {
                  "ingress": {
                    "targetPort": 8080,
                    "external": true
                  },
                  "secrets": "[if(variables('configureApplicationInsights'), createArray(createObject('name', parameters('applicationInsightsConnectionStringSecretName'), 'keyVaultUrl', variables('applicationInsightsConnStringAKVSecretUrl'), 'identity', variables('keyVaultUAMIResourceId'))), createArray())]"
                },
                "template": {
                  "containers": [
                    {
                      "image": "[format('mcr.microsoft.com/{0}:{1}', variables('imageName'), parameters('containerAppImageTag'))]",
                      "name": "[format('fhir-converter-{0}', parameters('timestamp'))]",
                      "env": "[concat(variables('securityConfiguration'), if(variables('configureApplicationInsights'), createArray(createObject('name', variables('applicationInsightsConnectionStringConfigurationName'), 'secretRef', parameters('applicationInsightsConnectionStringSecretName')), createObject('name', variables('applicationInsightsUAMIClientIdConfigurationName'), 'value', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('applicationInsightsUserAssignedIdentityName')), '2023-01-31').clientId)), createArray()), variables('blobTemplateHostingConfiguration'))]",
                      "resources": {
                        "cpu": "[json(parameters('cpuLimit'))]",
                        "memory": "[parameters('memoryLimit')]"
                      }
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]"
                  }
                }
              },
              "tags": {
                "fhirConverterEnvName": "[parameters('containerAppEnvName')]",
                "fhirConverterAppName": "[parameters('containerAppName')]",
                "fhirConverterImageName": "[variables('imageName')]",
                "fhirConverterImageVersion": "[parameters('containerAppImageTag')]"
              }
            },
            {
              "condition": "[variables('integrateTemplateStore')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('templateStorageAccountName'), 'default', parameters('templateStorageAccountContainerName'))]",
              "name": "[guid(variables('roleAssignmentName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName')), '2023-05-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('storageBlobDataReaderRoleDefinitionId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', parameters('containerAppName'))]"
              ]
            }
          ],
          "outputs": {
            "containerAppFQDN": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName')), '2023-05-01').configuration.ingress.fqdn]"
            },
            "containerAppLatestRevisionName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName')), '2023-05-01').latestRevisionName]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('convertInfrastructureDeploy_{0}', parameters('timestamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('dependentResourceDeploy_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    }
  ],
  "outputs": {
    "fhirConverterApiEndpoint": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('fhirConverterDeploy_{0}', parameters('timestamp'))), '2022-09-01').outputs.containerAppFQDN.value]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[parameters('resourceGroupName')]"
    }
  }
}