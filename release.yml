name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
- main
- master
- dotliquid
- refs/heads/dotliquid
pr: ['dotliquid']



variables:
  solution: '**/*.sln'
  unitTestProjects: "**/*UnitTests/*.csproj"
  publishProject: "**/*Tool/*.csproj"
  functionalTests: "**/*FunctionalTests/*.csproj"
  buildConfiguration: 'Release'
  major: 3
  minor: 3
  bulidnum: $[counter(format('{0}.{1}',variables['major'],variables['minor']), 100)]
  revision: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  version: $(major).$(minor).$(bulidnum).$(revision)

stages:
- stage: Build
  pool:
      vmImage: 'windows-latest'
  jobs:
  - job: Build
    steps:
    - script: echo $(version)

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'
        feedsToUse: 'select'
        vstsFeed: '7621b231-1a7d-4364-935b-2f72b911c43d/a60b7c8b-c6ae-4a8e-bd15-a526b603a1f2'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) -p:Version=$(version)'
            
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: '$(unitTestProjects)'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
        nobuild: true     
        

    - task: DotNetCoreCLI@2
      displayName: 'publish win_x64 bin'
      inputs:
        command: 'publish'
        projects: '$(publishProject)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.SourcesDirectory)/bin/win_x64 --runtime win-x64'
        nobuild: true
        publishWebProjects: false
        zipAfterPublish: false

    - task: DotNetCoreCLI@2
      displayName: 'publish github release bin'
      inputs:
        command: 'publish'
        projects: '$(publishProject)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/bin'
        nobuild: true
        publishWebProjects: false
        zipAfterPublish: true

    - task: DotNetCoreCLI@2
      displayName: 'publish functional tests'
      inputs:
        command: 'publish'
        projects: '$(functionalTests)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/functionalTests'
        nobuild: true
        publishWebProjects: false
        zipAfterPublish: false

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/data/Templates/Hl7v2'
        includeRootFolder: false
        archiveType: 'tar'
        tarCompression: 'gz'
        archiveFile: '$(Build.SourcesDirectory)/data/Templates/Hl7v2DefaultTemplates.tar.gz'

    - task: CopyFiles@2
      displayName: 'copy DefaultTemplates to artifacts'
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/data'
        targetFolder: '$(Build.ArtifactStagingDirectory)/data'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack nugets'
      inputs:
        command: custom
        custom: pack
        arguments: >
          --configuration $(buildConfiguration)
          --output $(Build.BinariesDirectory)/nupkgs
          --no-build
          -p:NuspecProperties="version=$(version)"
    
    - task: PublishBuildArtifacts@1
      displayName: 'publish nuget artifacts'
      inputs:
        pathToPublish: '$(Build.BinariesDirectory)/nupkgs'
        artifactName: 'nuget'
        publishLocation: 'container'     
    
    - task: PublishBuildArtifacts@1
      displayName: 'publish artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'FhirConverterBuild'

- stage: FunctionalTests
  jobs:
  - job: Windows_Functional_Test
    pool:
        vmImage: 'windows-latest'
    continueOnError: true
    steps:
    - checkout: none #skip checking out the default repository resource
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Artifacts'
      inputs:
        artifactName: FhirConverterBuild
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        git clone -q https://github.com/sowu880/dockerfiles-windows.git
        cd dockerfiles-windows/registry/
        docker build -t registry-windows:2.7.1 .
        docker run --rm -d -p 5000:5000 --name registry registry-windows:2.7.1
      displayName: start registry

    # - script: |
    #     docker pull mcr.microsoft.com/windows/servercore:ltsc2019
    #     docker tag mcr.microsoft.com/windows/servercore:ltsc2019 localhost:5000/windows
    #     docker push localhost:5000/windows
    #   displayName: test push

    - script: |
        dotnet test **/*FunctionalTests.dll
      displayName: Functional Tests
    - task: Docker@2
      displayName: stop registry
      condition: succeededOrFailed()
      inputs:
        command: stop
        container: registry

  - job: Linux_Functional_Test
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: true
    steps:
    - checkout: none #skip checking out the default repository resource
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Artifacts'
      inputs:
        artifactName: FhirConverterBuild
        downloadPath: $(System.DefaultWorkingDirectory)
    - script: |
        curl -LO https://github.com/deislabs/oras/releases/download/v0.8.1/oras_0.8.1_linux_amd64.tar.gz
        mkdir -p oras-install/
        tar -zxf oras_0.8.1_*.tar.gz -C oras-install/
        mv oras-install/oras /usr/local/bin/
        rm -rf oras_0.8.1_*.tar.gz oras-install/
        docker run --rm -d -p 5000:5000 --name registry registry:2
      displayName: start registry
    - script: |
        dotnet test **/*FunctionalTests.dll
      displayName: Functional Tests
    - task: Docker@2
      displayName: stop registry
      condition: succeededOrFailed()
      inputs:
        command: stop
        container: registry
  
- stage: Release
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))
  jobs:
  - job: publish
    pool:
        vmImage: 'windows-latest'
    steps:
    - checkout: none #skip checking out the default repository resource
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Artifacts'
      inputs:
        artifactName: FhirConverterBuild
        downloadPath: $(System.DefaultWorkingDirectory)

    - task: GithubRelease@0 
      displayName: 'Create GitHub Release'      
      inputs:
        gitHubConnection: githubpipeline
        repositoryName: microsoft/FHIR-Converter
        isDraft: true
        tagSource: manual
        tag: v$(major).$(minor).$(bulidnum)      
        assets: |
          $(System.DefaultWorkingDirectory)/FhirConverterBuild/bin/**
          $(System.DefaultWorkingDirectory)/FhirConverterBuild/data/Templates/Hl7v2DefaultTemplates.tar.gz




